"use client"

import React, { useState, useEffect } from "react"
import { AnimatePresence } from "framer-motion"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import Slide1 from "@/components/slides/slide-1"
import SplitViewSlide from "@/components/split-view-slide"

export default function Home() {
  const [currentSlide, setCurrentSlide] = useState(0)
  const [slideDirection, setSlideDirection] = useState(0)
  const totalSlides = 3 // Now we have 3 slides (original + 2 new ones)
  const [imagesLoaded, setImagesLoaded] = useState(false)

  // Preload images to ensure they're available for the slides
  useEffect(() => {
    const imageUrls = ["/images/background.jpg", "/images/shared-background.jpg", "/images/logo.png"]

    let loadedCount = 0
    const totalImages = imageUrls.length

    imageUrls.forEach((src) => {
      const img = new Image()
      img.src = src
      img.onload = () => {
        loadedCount++
        if (loadedCount === totalImages) {
          setImagesLoaded(true)
        }
      }
      img.onerror = () => {
        console.error(`Failed to load image: ${src}`)
        loadedCount++
        if (loadedCount === totalImages) {
          setImagesLoaded(true)
        }
      }
    })
  }, [])

  const nextSlide = () => {
    setSlideDirection(1)
    setCurrentSlide((prev) => (prev < totalSlides - 1 ? prev + 1 : prev))
  }

  const prevSlide = () => {
    setSlideDirection(-1)
    setCurrentSlide((prev) => (prev > 0 ? prev - 1 : prev))
  }

  const goToSlide = (index: number) => {
    setSlideDirection(index > currentSlide ? 1 : -1)
    setCurrentSlide(index)
  }

  // Add keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "ArrowRight") {
        nextSlide()
      } else if (e.key === "ArrowLeft") {
        prevSlide()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [currentSlide])

  if (!imagesLoaded) {
    return (
      <div className="flex h-screen w-screen items-center justify-center bg-black">
        <div className="text-white">Loading presentation...</div>
      </div>
    )
  }

  return (
    <main className="relative h-screen w-screen overflow-hidden bg-black">
      <AnimatePresence mode="wait" custom={slideDirection}>
        {currentSlide === 0 && <Slide1 key="slide-1" direction={slideDirection} onExplore={nextSlide} />}
        {currentSlide === 1 && <SplitViewSlide key="slide-2" direction={slideDirection} section="left" />}
        {currentSlide === 2 && <SplitViewSlide key="slide-3" direction={slideDirection} section="right" />}
      </AnimatePresence>

      <div className="absolute bottom-8 left-0 right-0 z-50 flex justify-center gap-6 px-4">
        <Button
          variant="ghost"
          size="icon"
          onClick={prevSlide}
          disabled={currentSlide === 0}
          className="group h-10 w-10 rounded-full border border-white/10 bg-black/20 p-0 text-white/70 shadow-lg transition-all duration-300 hover:bg-white/10 hover:text-white disabled:opacity-30 backdrop-blur-md"
        >
          <ChevronLeft className="h-5 w-5 transition-transform group-hover:scale-110" />
          <span className="sr-only">Previous slide</span>
        </Button>
        
        <div className="flex items-center gap-3">
          {Array.from({ length: totalSlides }).map((_, index) => (
            <button
              key={index}
              onClick={() => goToSlide(index)}
              aria-label={`Go to slide ${index + 1}`}
              aria-current={currentSlide === index ? "true" : "false"}
              className={`relative h-2.5 w-2.5 rounded-full transition-all duration-300 ${
                currentSlide === index 
                  ? "bg-white shadow-[0_0_5px_rgba(255,255,255,0.7)]" 
                  : "bg-white/20 hover:bg-white/50"
              }`}
            >
              {currentSlide === index && (
                <span className="absolute -inset-1 animate-ping rounded-full bg-white/40 opacity-75"></span>
              )}
            </button>
          ))}
        </div>
        
        <Button
          variant="ghost"
          size="icon"
          onClick={nextSlide}
          disabled={currentSlide === totalSlides - 1}
          className="group h-10 w-10 rounded-full border border-white/10 bg-black/20 p-0 text-white/70 shadow-lg transition-all duration-300 hover:bg-white/10 hover:text-white disabled:opacity-30 backdrop-blur-md"
        >
          <ChevronRight className="h-5 w-5 transition-transform group-hover:scale-110" />
          <span className="sr-only">Next slide</span>
        </Button>
      </div>
    </main>
  )
}
